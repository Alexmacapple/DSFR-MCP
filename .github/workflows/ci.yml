name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: üß™ Validate data quality
      run: npm run test:data
      
    - name: Run linting
      run: npm run lint
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Run performance tests
      run: npm run test:performance
      
    - name: Generate test coverage
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          test-results/
          coverage/
          data/data-quality-report.json

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=high
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: |
        npm run lint || echo "Linting completed with warnings"
        npm run lint -- --format=json --output-file=eslint-report.json || echo "{}" > eslint-report.json
      
    - name: Upload ESLint report
      uses: actions/upload-artifact@v4
      with:
        name: eslint-report
        path: eslint-report.json
        
    - name: Check dependencies for vulnerabilities
      run: npm audit --json > npm-audit.json || true
      
    - name: Upload audit report
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-report
        path: npm-audit.json

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [test, security, quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Test MCP server startup
      run: timeout 10s node src/index.js || [ $? -eq 124 ]
      
    - name: Validate package.json
      run: npm pack --dry-run
      
    - name: Check bundle size
      run: |
        BUNDLE_SIZE=$(du -sh node_modules | cut -f1)
        echo "Bundle size: $BUNDLE_SIZE"
        
  mcp-integration:
    name: MCP Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Test MCP protocol compliance
      run: node test-mcp.js
      
    - name: Run MCP integration tests
      run: npm run test:mcp

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check README links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        
    - name: Validate documentation structure
      run: |
        # Check required documentation files
        test -f README.md || exit 1
        test -f CHANGELOG.md || exit 1
        test -f CONTRIBUTING.md || exit 1
        test -f docs/API.md || exit 1
        
        # Check that documentation is up to date
        grep -q "1.3.0" README.md || exit 1
        grep -q "1.3.0" package.json || exit 1

  performance-baseline:
    name: Performance Baseline
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance benchmarks
      run: |
        # Run performance tests and capture metrics
        npm run test:performance -- --verbose > performance-results.txt
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-baseline
        path: performance-results.txt

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, security, quality, build, mcp-integration]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.security.result == 'success' && needs.quality.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "‚úÖ All checks passed! The build is ready."
        
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.security.result == 'failure' || needs.quality.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "‚ùå Some checks failed. Please review the logs."
        echo "Test result: ${{ needs.test.result }}"
        echo "Security result: ${{ needs.security.result }}"
        echo "Quality result: ${{ needs.quality.result }}"
        echo "Build result: ${{ needs.build.result }}"